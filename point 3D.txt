/**
 *This class represents a three-dimensional point the x,y and z coordinate values can get either negative, positive or zero double values.
 * @version 25/03/19
 * @author Tommy Ashkenazi
 */
//This class represents a three-dimensional point the x,y and z coordinate values can get either negative, positive or zero double values.
public class Point3D
{
    private double _x; // Coordinate X
    private double _y; // Coordinate y
    private double _z; // Coordinate z
    /**Constructs and initializes a Point3D to (0.0,0.0,0.0).*/
    public Point3D()//Empty constructor
    {
        _x = 0.0;
        _y = 0.0;
        _z = 0.0;

    }

    /**Constructs and initializes a Point3D from the specified xyz coordinates
    @param x the x coordinate
    @param y the y coordinate
    @param z the z coordinate*/

    public Point3D(double x,double y,double z)//Constructor that gets X,Y and Z variables
    {
        _x = x;
        _y = y;
        _z = z;

    }

    /**Constructs and initializes a Point3D from the specified Point3D.
    @param other the Point3D which the new instance initialization will be based on*/
    public Point3D(Point3D other)//Copy Constructor 
    {
        _x = other._x;
        _y = other._y;
        _z = other._z;

    }

    /**returns the x coordinate.
    @return the value of the x coordinate*/
    public double getX()
    {
        return (_x);

    }

    /**returns the y coordinate.
    @return the value of the y coordinate*/
    public double getY()
    {
        return (_y);

    }

    /**returns the z coordinate.
    @return the value of the z coordinate*/
    public double getZ()
    {
        return (_z);

    }

    /**sets the x coordinate to the given x
    @param the x value to set*/
    public void setX(double num)
    {

        _x = num;
    }

    /**sets the y coordinate to the given y
    @param the y value to set*/
    public void setY(double num)
    {

        _y = num;
    }

    /**sets the z coordinate to the given z
    @param the z value to set*/
    public void setZ(double num)
    {

        _z = num;
    }

    /**Returns a string representation of this Point3D.
    @over toString in class java.lang.Object*/
    public String toString()
    {
        return "("+getX()+","+getY()+","+getZ()+")";
    }

    /**Determines whether or not two points are equal.
    @param other a Point3D object to be compared with this Point3D*/
    public boolean equals(Point3D other)
    {
        return ( other.getX()==getX() && other.getY()==getY() && other.getZ()==getZ() );
    }

    /**Checks if this point is above the other point.
    @param other The point to check whether this point is above it
    @return true if this point is above the other point, false otherwise*/
    public boolean isAbove (Point3D other)
    {
        return (getZ() > other.getZ());
    }

    /**Checks if this point is under the other point.
    @param other The point to check whether this point is under i
    @return true if this point is under the other point, false otherwise*/
    public boolean isUnder (Point3D other)
    {
        return other.isAbove(this);
    }

    /**Checks if this point is to the left of the other point.
    @param other The point to check whether this point is left of it
    @return true if this point is to the left of the other point, false otherwise*/
    public boolean isLeft (Point3D other)
    {
        return (getY() < other.getY());
    }

    /**Checks if this point is to the right of the other point.
    @param other The point to check whether this point is right of it
    @return true if this point is to the right of the other point, false otherwise*/
    public boolean isRight (Point3D other)
    {
        return other.isLeft(this);
    }

    /**Checks if this point is behind the other point.
    @param other The point to check whether this point behind it
    @return true if this point is behind the other point, false otherwise*/
    public boolean isBehind (Point3D other)
    {
        return (getX() < other.getX());
    }

    /**Checks if this point is in front of the other point.
    @param other The point to check if this point is in front of it
    @return true if this point is in front of the other point, false otherwise*/
    public boolean isInFrontOf (Point3D other)
    {
        return other.isBehind(this);
    }

    /**Moves the Point3D in location (x,y,z), by dx along the x axis, by dy along the y axis and dz along the z axis
     * so that it now represents the Point3D in the following 3D coordintes (x+dx,y+dy,z+dz).
    @param dx the addtion for coordinate x value
    @param dy the addtion for coordinate y vlaue
    @param dz the addtion for coordinate z value*/
    public void move (double dx, double dy, double dz)
    {

        setX(_x + dx);
        setY(_y + dy);
        setZ(_z + dz);

    }

    /**Returns the distance between this point and other point p.
    @param p the other point*/
    public double distance (Point3D p)
    {

        return Math.sqrt(Math.pow( getX() - p.getX(),2) + Math.pow(getY() - p.getY(),2) + Math.pow(getZ() - p.getZ(),2) );
    }

   
}//End of class
