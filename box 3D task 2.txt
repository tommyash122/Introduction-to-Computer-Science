
/**
 * This class represents a three-dimensional box The box is represented by its lower-left-front point and three integers 
 * for the length (x axis), width (y axis) and height (z axis) of the box. the box dimensions must be equal or greater than 1.
 * 
 * @author Tommy Ashkenazi 
 * @version 27/03/19
 */
//This class represents a three-dimensional box The box is represented by its lower-left-front point and three integers 
// for the length (x axis), width (y axis) and height (z axis) of the box. the box dimensions must be equal or greater than 1.
public class Box3D
{
    private Point3D _base; // The left bottom front point of the box based on Point3D class
    private int _length; // The length of the box
    private int _width; // The width of the box
    private int _height; // The height of the box 

    public final double DEAFAULT_VAL =0;//A value that will be used later
    public final int MIN_POSITIVE =1;//A value that will be used later
    /**public Box3D()
    Constructs and initializes a box with a default base point and all dimensions to 1.*/
    public Box3D()//Empty Constructor
    {
        _base = new Point3D();
        _length = MIN_POSITIVE;
        _width = MIN_POSITIVE;
        _height = MIN_POSITIVE;

    }

    /**public Box3D(Box3D other)
    Constructs and initializes a Box3D object from a given Box3D.
    @param other - the box to copy from. Contains the initialization of the base point and all dimentions.*/
    public Box3D(Box3D other)//Copy Constructor
    {
        _base = new Point3D(other._base);
        _length = other._length;
        _width = other._width;
        _height = other._height;

    }

    /**public Box3D(Point3D p,
    int length,
    int width,
    int height)
    Constructs and initializes a box object from a given base point and 3 integers as the dimentions of the Box.
    @param p - the base point of the box
    @param length - the length of the box
    @param width - the width of the box
    @param height - the height of the box*/
    //Constructor that gets a point from Point3D class and 3 variables that represents the measures of the box
    public Box3D(Point3D p,int length,int width,int heigth )
    {
        _base = new Point3D(p);
        _length = length;
        _width = width;
        _height = heigth;
        if(_length<=MIN_POSITIVE)// Conditions that make sure the value of the length dont came out less than 1
        {
            _length = MIN_POSITIVE;
        }
        if(_width<=MIN_POSITIVE) //Conditions that make sure the value of the width dont came out less than 1
        {
            _width = MIN_POSITIVE;
        }
        if(_height<=MIN_POSITIVE) //Conditions that make sure the value of the height dont came out less than 1
        {
            _height = MIN_POSITIVE;
        }

    }

    /**public int getLength()
    returns the length dimension
    @return the length of the box*/
    public int getLength()
    {
        return (_length);
    }

    /**public int getWidth()
    returns the width dimension
    @return the width of the box*/
    public int getWidth()
    {
        return (_width);
    }

    /**public int getHeight()
    returns the height dimension
    @return the height of the box*/
    public int getHeight()
    {
        return (_height);
    }

    /**public Point3D getBase()
    returns the lower-left-front (base) Point3D of the box
    @return the base point of the box*/
    public Point3D getBase()
    {
        return new Point3D(_base);
    }

    /**public void setLength(int num)
    Sets the length of the box only if the given value is equal or greater than 1.
    @param num - the length to set*/
    public void setLength(int num)
    {
        if(num >= MIN_POSITIVE)//Sets the length of the box only if the given value is equal or greater than 1. 
        {
            _length = num;
        }

    }

    /**public void setWidth(int num)
    Sets the width of the box only if the given value is equal or greater than 1.
    @param num - the width to set*/
    public void setWidth(int num)
    {
        if(num >= MIN_POSITIVE)//Sets the width of the box only if the given value is equal or greater than 1.
        {
            _width = num;
        }

    }

    /**
    Sets the height of the box only if the given value is equal or greater than 1.
    @param num - the height to set*/
    public void setHeight(int num)
    {
        if(num >= MIN_POSITIVE)//Sets the height of the box only if the given value is equal or greater than 1
        {
            _height = num;
        }

    }

    /**
    Sets the base point of the box
    @param otherBase - the Point3D to set*/
    public void setBase(Point3D p)
    {
        _base = new Point3D(p);

    }

    /**
    Returns a string representation of this Box3D object.
    @over toString in class java.lang.Object*/
    public String toString()
    {
        return (" The base point is (" + getBase().getX() + "," + getBase().getY() + "," + getBase().getZ() + "), length = " + getLength() + ", width = " + getWidth() + ", height = " + getHeight());
    }

    /**
    Determines whether or not the two boxes are equal.
    @param other - a Box3D object to be compared with this Box3D*/
    public boolean equals(Box3D other)//Determines whether or not the two boxes are equal
    {
        if(this.getBase().equals(other.getBase()) && this.getLength()==(other.getLength()) && this.getWidth()==(other.getWidth()) && this.getHeight()==(other.getHeight()))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    /**
    Moves the box in the (x,y,z) coordinate system to (x+dx,y+dy,z+dz) without changing the box dimensions
    @return the new box in its new location*/
    public Box3D move(double dx, double dy, double dz)
    {
        Point3D newPoint = new Point3D(getBase());
        newPoint.move(dx,dy,dz);
        Box3D newBox = new Box3D(newPoint,getLength(),getWidth(),getHeight());
        return newBox;

    }

    /**
    Calculates and returns the upper-right-back point of this box
    @return the upper-right-back point of this box*/
    public Point3D getUpRightBackPoint()
    {
        Point3D upRightBackPoint = new Point3D(getBase());
        upRightBackPoint.move(-getLength(),getWidth(),getHeight());
        return upRightBackPoint;
    }

    /**
    Calculates and returns the center point of the box
    @return the center point of the box*/
    public Point3D getCenter()
    {
        Point3D getCenter = new Point3D(getBase());
        getCenter.move((double)(-getLength())/2,(double)(getWidth())/2,(double)(getHeight())/2);
        return getCenter;

    }

    /**
    Computes the distance between two boxes based on the distance of their center points.
    @return the distance between two Box3D objects*/
    public double distance(Box3D other)
    {
        Point3D point1 = new Point3D(this.getBase());
        Box3D box1 = new Box3D(point1,getLength(),getWidth(),getHeight());
        Point3D point2 = new Point3D(other.getBase());
        Box3D box2 = new Box3D(point2,other.getLength(),other.getWidth(),other.getHeight());
        return (box1.getCenter().distance(box2.getCenter()));

    }

    /**
    Computes the volume of the box.
    @return volume of the Box3D object*/
    public int getVolume()
    {
        return (_length*_width*_height);
    }

    /**
    Computes the surface area of a box.
    @return the surface area of a Box3D object*/
    public int getSurfaceArea()
    {
        return ((2*getLength()*getWidth()) + (2*getLength()*getHeight()) + (2*getWidth()*getHeight()));

    }

    /**
    Determines whether this box has a greater volume in compare to other box.
    @param other - a Box3D object whose volume will be compared with the volume of this Box3D*/
    public boolean isLargerCapacity(Box3D other)
    {
        Box3D box1 = new Box3D(this._base,this.getLength(),this.getWidth(),this._height);
        Box3D box2 = new Box3D(other._base,other.getLength(),other.getWidth(),other._height);
        if(box1.getVolume() > box2.getVolume()) // Determines whether this box has a greater volume in compare to other box.
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    /**
    Determines whether this box can contain the other box.
    @param other - a Box3D object to check if it can be contained within this box*/

    public boolean contains(Box3D other)
    {
        Box3D box1 = new Box3D(this._base,this._length,this._width,this._height);
        Box3D box2 = new Box3D(other._base,other._length,other._width,other._height);
        if((this._length > other._length) && (this._width > other._width) && (this._height > other._height))//Determines whether this box can contain the other box
        {
            return true;  
        }
        else
        {
            return false;
        }
    }

    /**
    Checks if this box is above the other box.
    @param other - The box to check if this box is above it
    @return true if this box is above the other box, false otherwise*/
    public boolean isAbove(Box3D other)
    {
        Point3D point1 = new Point3D(this.getBase());
        Box3D box1 = new Box3D(point1,getLength(),getWidth(),getHeight());
        Point3D point2 = new Point3D(other.getBase());
        Box3D box2 = new Box3D(point2,other.getLength(),other.getWidth(),other.getHeight());
        if(point1.isAbove(box2.getUpRightBackPoint())) //Checks if this box is above the other box 
        {
            return true;
        }
        else 
        {
            return false;
        }    
    }

}//End of class
